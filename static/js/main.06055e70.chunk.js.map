{"version":3,"sources":["utils/fetchClient.ts","components/Footer/Footer.tsx","api/todos.ts","components/Header/Header.tsx","components/Main/Main.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","StatusTodos","client","deleteTodo","todoId","updateTodo","id","userId","title","completed","Header","setErrorMassege","hideError","addTodo","spinnerStatus","changeDate","changeCurrentId","setTodos","todos","isCompletedAllTodos","setSpinnerForTodos","useState","titleTodo","setTitleTodo","isblockedInput","setIsblockedInput","returnFocus","setReturnFocus","inputAddFocus","useRef","useEffect","current","focus","className","length","aria-label","type","onClick","promises","map","todo","all","Date","catch","finally","onSubmit","event","preventDefault","trim","tempTodo","createTodo","ref","value","onChange","target","disabled","placeholder","Main","removeTodo","spinner","cuurentId","setDate","spinnerForTodos","todoIdEdit","setTodoIdEdit","handleClickDeleteTodo","inputFocus","checked","handleChangeCompletedTodo","onDoubleClick","defaultValue","onKeyUp","key","newTitle","currentTarget","handleKeyUpChangeTitleTodo","onBlur","handleBlurChangeTitleTodo","QueryTodos","Footer","changeQuery","isCompletedTodo","numberActive","status","setIsSpinner","href","active","style","visibility","USER_ID","App","errorMassege","query","setQuery","isSpinner","setCurrentId","date","timerId","window","clearTimeout","some","numberOfActive","useMemo","filter","newTodo","currentTodos","param","filterTodos","updatedListTodos","classNames","hidden","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06055e70.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { deleteTodo } from '../../api/todos';\n\ntype Props = {\n  changeQuery: (query: string) => void,\n  isCompletedTodo: boolean,\n  numberActive: number,\n  status: string,\n  todos: Todo[],\n  setDate: (date: Date) => void,\n  setErrorMassege: (error: string) => void,\n  setIsSpinner: (value: boolean) => void,\n};\n\nenum StatusTodos {\n  all = 'All',\n  active = 'Active',\n  completed = 'Completed',\n}\n\nexport const Footer: React.FC<Props> = ({\n  changeQuery,\n  isCompletedTodo,\n  numberActive,\n  status,\n  todos,\n  setDate,\n  setErrorMassege,\n  setIsSpinner,\n}) => {\n  const handleClickAll = () => {\n    changeQuery(StatusTodos.all);\n  };\n\n  const handleClickActive = () => {\n    changeQuery(StatusTodos.active);\n  };\n\n  const handleClickCompleted = () => {\n    changeQuery(StatusTodos.completed);\n  };\n\n  const handleClickDeleteCompletedTodos = () => {\n    setIsSpinner(true);\n    const promises = todos.map(todo => {\n      if (todo.completed) {\n        return deleteTodo(todo.id);\n      }\n\n      return false;\n    });\n\n    Promise.all(promises)\n      .then(() => setDate(new Date()))\n      .catch(() => setErrorMassege('Unable to delete a todos'))\n      .finally(() => setIsSpinner(false));\n  };\n\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {`${numberActive} items left`}\n      </span>\n\n      {/* Active filter should have a 'selected' class */}\n      <nav className=\"filter\">\n        <a\n          onClick={handleClickAll}\n          href=\"#/\"\n          className={`filter__link ${status === StatusTodos.all && 'selected'}`}\n        >\n          All\n        </a>\n\n        <a\n          onClick={handleClickActive}\n          href=\"#/active\"\n          className={`filter__link ${status === StatusTodos.active && 'selected'}`}\n        >\n          Active\n        </a>\n\n        <a\n          onClick={handleClickCompleted}\n          href=\"#/completed\"\n          className={`filter__link ${status === StatusTodos.completed && 'selected'}`}\n        >\n          Completed\n        </a>\n      </nav>\n\n      {/* don't show this button if there are no completed todos */}\n      <button\n        style={isCompletedTodo ? { visibility: 'visible' } : { visibility: 'hidden' }}\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        onClick={handleClickDeleteCompletedTodos}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const createTodo = ({ userId, title, completed }: Omit<Todo, 'id'>) => {\n  return client.post<Todo>('/todos', { userId, title, completed });\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const updateTodo = ({\n  id, userId, title, completed,\n}: Todo) => {\n  return client.patch<Todo>(`/todos/${id}`, { userId, title, completed });\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { createTodo, updateTodo } from '../../api/todos';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  setErrorMassege: (error: string) => void,\n  hideError: () => void,\n  userId: number,\n  addTodo: (todo: Todo) => void,\n  spinnerStatus: (value: boolean) => void,\n  changeDate: (date: Date) => void,\n  changeCurrentId: (id: number) => void,\n  setTodos: (todos: Todo[]) => void,\n  todos: Todo[],\n  isCompletedAllTodos: boolean,\n  setSpinnerForTodos: (value: boolean) => void,\n};\n\nexport const Header: React.FC<Props> = ({\n  setErrorMassege,\n  hideError,\n  userId,\n  addTodo,\n  spinnerStatus,\n  changeDate,\n  changeCurrentId,\n  setTodos,\n  todos,\n  isCompletedAllTodos,\n  setSpinnerForTodos,\n}) => {\n  const [titleTodo, setTitleTodo] = useState('');\n  const [isblockedInput, setIsblockedInput] = useState(false);\n  const [returnFocus, setReturnFocus] = useState(false);\n\n  const inputAddFocus = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (returnFocus) {\n      inputAddFocus.current?.focus();\n    }\n  }, [returnFocus]);\n\n  const handleChangeTitleTodo = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setTitleTodo(event.target.value);\n  };\n\n  const handleSubmitTodo = (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsblockedInput(true);\n\n    if (!titleTodo.trim()) {\n      setErrorMassege('Title can\\'t be empty');\n      hideError();\n      setIsblockedInput(false);\n\n      return;\n    }\n\n    const tempTodo = {\n      id: 0,\n      userId,\n      title: titleTodo,\n      completed: false,\n    };\n\n    setReturnFocus(false);\n    changeCurrentId(0);\n    spinnerStatus(true);\n    addTodo(tempTodo);\n\n    createTodo(tempTodo)\n      .then(() => {\n        setTitleTodo('');\n        spinnerStatus(false);\n        changeDate(new Date());\n      })\n      .catch(() => {\n        setErrorMassege('Unable to add a todo');\n        hideError();\n        setTodos(todos);\n      })\n      .finally(() => {\n        setIsblockedInput(false);\n        setReturnFocus(true);\n      });\n  };\n\n  const handleClickCompletedAllTodos = () => {\n    if (isCompletedAllTodos) {\n      setErrorMassege('');\n      spinnerStatus(true);\n      setSpinnerForTodos(true);\n      const promises = todos.map(todo => {\n        return updateTodo({ ...todo, completed: true });\n      });\n\n      Promise.all(promises)\n        .then(() => changeDate(new Date()))\n        .catch(() => {\n          setErrorMassege('Unable to update a todos');\n          hideError();\n        })\n        .finally(() => {\n          setSpinnerForTodos(false);\n          spinnerStatus(false);\n        });\n    }\n\n    if (!isCompletedAllTodos) {\n      setErrorMassege('');\n      spinnerStatus(true);\n      setSpinnerForTodos(true);\n      const promises = todos.map(todo => {\n        return updateTodo({ ...todo, completed: false });\n      });\n\n      Promise.all(promises)\n        .then(() => changeDate(new Date()))\n        .catch(() => {\n          setErrorMassege('Unable to update a todos');\n          hideError();\n        })\n        .finally(() => {\n          setSpinnerForTodos(false);\n          spinnerStatus(false);\n        });\n    }\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n      {/* this buttons is active only if there are some active todos */}\n      {!!todos.length && (\n        <button\n          aria-label=\"change the completed of todos\"\n          type=\"button\"\n          className={`todoapp__toggle-all ${!isCompletedAllTodos && 'active'}`}\n          onClick={handleClickCompletedAllTodos}\n        />\n      )}\n\n      {/* Add a todo on form submit */}\n      <form onSubmit={handleSubmitTodo}>\n        <input\n          ref={inputAddFocus}\n          value={titleTodo}\n          onChange={handleChangeTitleTodo}\n          disabled={isblockedInput}\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    </header>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { deleteTodo, updateTodo } from '../../api/todos';\n\ntype Props = {\n  todos: Todo[],\n  removeTodo: (todoId: number) => void,\n  setErrorMassege: (error: string) => void,\n  hideError: () => void,\n  spinner: boolean,\n  spinnerStatus: (value: boolean) => void,\n  cuurentId: number,\n  changeCurrentId: (id: number) => void,\n  setDate: (newData: Date) => void,\n  userId: number,\n  spinnerForTodos: boolean,\n};\n\nexport const Main: React.FC<Props> = ({\n  todos,\n  removeTodo,\n  setErrorMassege,\n  hideError,\n  spinner,\n  spinnerStatus,\n  cuurentId,\n  changeCurrentId,\n  setDate,\n  userId,\n  spinnerForTodos,\n}) => {\n  const [todoIdEdit, setTodoIdEdit] = useState<number | null>(null);\n\n  const handleClickDeleteTodo = (todoId: number) => {\n    spinnerStatus(true);\n    changeCurrentId(todoId);\n    deleteTodo(todoId)\n      .then(response => {\n        if (response) {\n          removeTodo(todoId);\n        }\n      })\n      .catch(() => {\n        setErrorMassege('Unable to delete a todo');\n        hideError();\n      })\n      .finally(() => spinnerStatus(false));\n  };\n\n  const handleChangeCompletedTodo = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    id: number,\n    title: string,\n  ) => {\n    if (event.target.checked) {\n      setErrorMassege('');\n      spinnerStatus(true);\n      changeCurrentId(id);\n      updateTodo({\n        id, userId, title, completed: true,\n      })\n        .then(() => setDate(new Date()))\n        .catch(() => {\n          setErrorMassege('Unable to update a todo');\n          hideError();\n        })\n        .finally(() => spinnerStatus(false));\n    }\n\n    if (!event.target.checked) {\n      setErrorMassege('');\n      spinnerStatus(true);\n      changeCurrentId(id);\n      updateTodo({\n        id, userId, title, completed: false,\n      })\n        .then(() => setDate(new Date()))\n        .catch(() => {\n          setErrorMassege('Unable to update a todo');\n          hideError();\n        })\n        .finally(() => spinnerStatus(false));\n    }\n  };\n\n  const inputFocus = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    inputFocus.current?.focus();\n  }, [todoIdEdit]);\n\n  const handleKeyUpChangeTitleTodo = (\n    event: React.KeyboardEvent<HTMLInputElement>,\n    id: number,\n    completed: boolean,\n    title: string,\n  ) => {\n    if (event.key === 'Enter') {\n      const newTitle = event.currentTarget.value;\n\n      if (title === newTitle) {\n        setTodoIdEdit(null);\n\n        return;\n      }\n\n      if (!newTitle.trim()) {\n        handleClickDeleteTodo(id);\n\n        return;\n      }\n\n      setErrorMassege('');\n      spinnerStatus(true);\n      changeCurrentId(id);\n\n      updateTodo({\n        id, userId, title: newTitle, completed,\n      })\n        .then(() => {\n          setDate(new Date());\n          setTodoIdEdit(null);\n        })\n        .catch(() => {\n          setErrorMassege('Unable to update a todo');\n          hideError();\n        })\n        .finally(() => spinnerStatus(false));\n    }\n\n    if (event.key === 'Escape') {\n      setTodoIdEdit(null);\n    }\n  };\n\n  const handleBlurChangeTitleTodo = (\n    event: React.FocusEvent<HTMLInputElement>,\n    id: number,\n    completed: boolean,\n    title: string,\n  ) => {\n    const newTitle = event.target.value;\n\n    if (title === newTitle) {\n      setTodoIdEdit(null);\n\n      return;\n    }\n\n    setErrorMassege('');\n    spinnerStatus(true);\n    changeCurrentId(id);\n\n    updateTodo({\n      id, userId, title: newTitle, completed,\n    })\n      .then(() => {\n        setDate(new Date());\n        setTodoIdEdit(null);\n      })\n      .catch(() => {\n        setErrorMassege('Unable to update a todo');\n        hideError();\n      })\n      .finally(() => spinnerStatus(false));\n  };\n\n  return (\n    <section className=\"todoapp__main\">\n      {todos.map(({ title, id, completed }) => (\n        <div key={id} className={`todo ${completed && 'completed'}`}>\n          {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n          <label className=\"todo__status-label\">\n            <input\n              type=\"checkbox\"\n              className=\"todo__status\"\n              onChange={(event) => handleChangeCompletedTodo(event, id, title)}\n              checked={completed}\n            />\n          </label>\n\n          <>\n            {todoIdEdit !== id ? (\n              <>\n                <span\n                  className=\"todo__title\"\n                  onDoubleClick={() => setTodoIdEdit(id)}\n                >\n                  {title}\n                </span>\n                <button\n                  onClick={() => handleClickDeleteTodo(id)}\n                  type=\"button\"\n                  className=\"todo__remove\"\n                >\n                  ×\n                </button>\n              </>\n            ) : (\n              <form onSubmit={(event) => event.preventDefault()}>\n                <input\n                  ref={inputFocus}\n                  type=\"text\"\n                  className=\"todo__title-field\"\n                  placeholder=\"Empty todo will be deleted\"\n                  defaultValue={title}\n                  onKeyUp={(event) => {\n                    handleKeyUpChangeTitleTodo(event, id, completed, title);\n                  }}\n                  onBlur={(event) => {\n                    handleBlurChangeTitleTodo(event, id, completed, title);\n                  }}\n                />\n              </form>\n            )}\n          </>\n\n          <div className={`modal overlay ${(cuurentId === id || spinnerForTodos || !!completed)\n            && spinner && 'is-active'\n          }`}\n          >\n            <div className=\"modal-background has-background-white-ter\" />\n            <div className=\"loader\" />\n          </div>\n        </div>\n      ))}\n    </section>\n  );\n};\n","/* eslint-disable max-len */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, {\n  useState, useEffect, useMemo, useRef,\n} from 'react';\nimport classNames from 'classnames';\nimport { UserWarning } from './UserWarning';\nimport { Header } from './components/Header';\nimport { Main } from './components/Main';\nimport { Footer } from './components/Footer';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api/todos';\n\nconst USER_ID = 11359;\n\nenum QueryTodos {\n  all = 'All',\n  active = 'Active',\n  completed = 'Completed',\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [errorMassege, setErrorMassege] = useState('');\n  const [query, setQuery] = useState<string>(QueryTodos.all);\n  const [isSpinner, setIsSpinner] = useState(false);\n  const [cuurentId, setCurrentId] = useState(0);\n  const [date, setDate] = useState(new Date());\n  const [spinnerForTodos, setSpinnerForTodos] = useState(false);\n\n  const timerId = useRef(0);\n\n  const hideError = () => {\n    timerId.current = window.setTimeout(() => setErrorMassege(''), 3000);\n  };\n\n  useEffect(() => {\n    getTodos(USER_ID)\n      .then(setTodos)\n      .catch(() => {\n        setErrorMassege('unable to load todos');\n        hideError();\n      });\n\n    return () => window.clearTimeout(timerId.current);\n  }, [date]);\n\n  const isCompletedTodo = todos.some(todo => todo.completed);\n\n  const isCompletedAllTodos = todos.some(todo => !todo.completed);\n\n  const getNumberActiveTodos = (items: Todo[]) => {\n    const activeTodos = items.filter(todo => !todo.completed);\n\n    return activeTodos.length;\n  };\n\n  const numberOfActive = useMemo(() => {\n    return getNumberActiveTodos(todos);\n  }, [todos]);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  const filterTodos = (param: string) => {\n    switch (param) {\n      case QueryTodos.active: {\n        return todos.filter(todo => !todo.completed);\n      }\n\n      case QueryTodos.completed: {\n        return todos.filter(todo => todo.completed);\n      }\n\n      default:\n        return todos;\n    }\n  };\n\n  const removeTodoFromList = (todoId: number) => {\n    setTodos(currentTodos => {\n      const updatedListTodos = currentTodos.filter(todo => todo.id !== todoId);\n\n      return [...updatedListTodos];\n    });\n  };\n\n  const addNewTodoToList = (newTodo: Todo) => {\n    setTodos(currentTodos => {\n      return [...currentTodos, newTodo];\n    });\n  };\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header\n          setErrorMassege={setErrorMassege}\n          hideError={hideError}\n          userId={USER_ID}\n          addTodo={addNewTodoToList}\n          spinnerStatus={setIsSpinner}\n          changeDate={setDate}\n          changeCurrentId={setCurrentId}\n          setTodos={setTodos}\n          todos={todos}\n          isCompletedAllTodos={isCompletedAllTodos}\n          setSpinnerForTodos={setSpinnerForTodos}\n        />\n        <Main\n          todos={filterTodos(query)}\n          removeTodo={removeTodoFromList}\n          setErrorMassege={setErrorMassege}\n          hideError={hideError}\n          spinner={isSpinner}\n          spinnerStatus={setIsSpinner}\n          cuurentId={cuurentId}\n          changeCurrentId={setCurrentId}\n          setDate={setDate}\n          userId={USER_ID}\n          spinnerForTodos={spinnerForTodos}\n        />\n\n        {!!todos.length && (\n          <Footer\n            changeQuery={setQuery}\n            isCompletedTodo={isCompletedTodo}\n            numberActive={numberOfActive}\n            status={query}\n            todos={todos}\n            setDate={setDate}\n            setErrorMassege={setErrorMassege}\n            setIsSpinner={setIsSpinner}\n          />\n        )}\n      </div>\n\n      {errorMassege && (\n        <div\n          className={classNames('notification is-danger is-light has-text-weight-normal', { hidden: !errorMassege })}\n        >\n          <button\n            onClick={() => setErrorMassege('')}\n            type=\"button\"\n            className=\"delete\"\n          />\n\n          {/* show only one message at a time */}\n          {errorMassege}\n        </div>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLDivElement,\n);\n"],"sourceRoot":""}